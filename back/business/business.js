/**
 * What a user looks like in database
 * @typedef {Object} User
 * @property {string} first The first name
 * @property {string} last The last name
 * @property {string} email The email
 * @property {string} company The company
 * @property {string} country The country
 * @property {number?} id The id (generated by business)
 * @property {string?} created_at The date of creation (generated by business) 
 */

/**
 * Importation des modules
 */

const data = require("../data/data");
const user_checker = {
    first: /^[A-Za-z-]+$/,
    last: /^[A-Za-z-]+$/,
    email: /^[^\s@]+@([^\s@.,]+\.)+[^\s@.,]{2,3}$/,
    company: /^[A-Za-z- ]+$/,
    country: /^[A-Za-z- ]+$/
};

// ----- Utils functions -----

/**
 * Check the structure of a given user
 * @param {User} user The user to check
 * @param {boolean} check_all_keys Do we check all keys of the checker
 * @returns {boolean} Is the user in the right format ?
 */
const is_valid_user = (user, check_all_keys) => {
    let user_keys = Object.keys(user).sort();
    let checker_keys = Object.keys(user_checker).sort();

    // Check all keys of user given
    if (check_all_keys && !are_array_equal(user_keys, checker_keys)) {
        return false;
    }

    // Check the sub array of user keys
    if (!check_all_keys && !is_subarray_of(user_keys, checker_keys)) {
        return false;
    }

    // Check if user is valid
    let is_valid_user = user_keys.reduce(
            (acc, key) => (user[key].match(user_checker[key]) != null) && acc,
            true
        );

    return is_valid_user;
}

/**
 * Check if two arrays are equal (with order of elements)
 * @param {Array} a The first array
 * @param {Array} b The second array
 * @returns {Boolean} Are the array equal ?
 */
const are_array_equal = (a, b) => JSON.stringify(a) == JSON.stringify(b);


/**
 * Check if one array is a subarray of another
 * @param {Array} a The subarray
 * @param {Array} b The super array
 * @returns {boolean} Is a a subarray of b ?
 */
const is_subarray_of = (a, b) => {
    for (let elem of a) {
        // This elem is not in b
        if (b.indexOf(elem) == -1) {
            return false;
        }
    }

    return true;
};

// ----- Exported functions -----

const business_public = {
    /**
     * Get all users from DB
     * @returns {User[]} All users from database
     */
    getAllUsers: () => data.getAllUsers(),
    /**
     * Try to add user to database and return boolean
     * indicating if operation has been done
     * @param {User} user The user to add
     * @returns {boolean} Is the user added to database ?
     */
    addUser: user => {
        // Check if structure is correct
        if (!is_valid_user(user, true)) {
            return false;
        }

        return data.addUser(user);
    },
    /**
     * Try to edit user in database and return boolean
     * indicating if operation has been done
     * @param {{id: number, to_edit: User}} user The user to edit
     * @returns {boolean} Is the user edited in database ?
     */
    editUser: (user) => {
        // Check if id in user
        if (!("id" in user && "to_edit" in user)) {
            return false;
        }

        // Check if user id is a number
        if (typeof user.id != "number") {
            return false;
        }

        // Check if structure is correct
        if (!is_valid_user(user.to_edit, false)) {
            return false;
        }

        return data.editUser(user);
    },
    /**
     * Try to delete user from database and return boolean
     * indicating if operation has been done
     * @param {{id: number}} user The user to delete
     * @returns {boolean} Is the user deleted from database ?
     */
    delUser: (user) => {
        // Check if id in user
        if (!("id" in user)) {
            return false;
        }

        // Check if user id is a number
        if (typeof user.id != "number") {
            return false;
        }

        return data.delUser(user.id);
    }
};

// ----- Exportation comme module -----

module.exports = business_public;